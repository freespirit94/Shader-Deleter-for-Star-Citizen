import tkinter as tk
from tkinter import ttk, filedialog, IntVar
import shutil
import getpass
import os
import subprocess


config_file_path = "config.cfg"  
if not os.path.isfile(config_file_path):

    selected_program_path = filedialog.askopenfilename(title="Bitte wähle den Pfad zum RSI Launcher")
    if selected_program_path:

        with open(config_file_path, "w") as file:
            file.write(selected_program_path + "\n")
            file.write("True\n")  # Standardmäßig auf True setzen, oder "False" für deaktiviert

def write_config(program_path, exit_checkbox_state):
 
    with open(config_file_path, "w") as file:
        file.write(program_path + "\n")
        file.write(exit_checkbox_state + "\n")

window = tk.Tk()
window.title("S.C. Shaderordner löschen")
window.geometry("400x300")


bg_image = tk.PhotoImage(file="logo.png")  
background_label = ttk.Label(window, image=bg_image)
background_label.place(relwidth=1, relheight=1)


style = ttk.Style()
style.configure("TButton", padding=10, font=("Times New Roman", 12))
style.configure("Green.TLabel", foreground="green", font=("Times New Roman", 12))
style.configure("Red.TLabel", foreground="red", font=("Times New Roman", 12))


with open(config_file_path, "r") as file:
    program_path = file.readline().strip()
    exit_checkbox_state = file.readline().strip()


user_name = getpass.getuser()
folder_path = f"C:\\Users\\{user_name}\\AppData\\Local\\Star Citizen"

def delete_folder_contents(folder_path):
    try:
        for item in os.listdir(folder_path):
            item_path = os.path.join(folder_path, item)
            if os.path.isfile(item_path):
                os.remove(item_path)
            elif os.path.isdir(item_path):
                if item != "Crashes":  
                    shutil.rmtree(item_path)
        status_label.config(text="Shader wurden gelöscht", style="Green.TLabel")
   
        start_custom_program()

        write_config(program_path, str(exit_var.get() == 1).lower())
    except Exception as e:
        status_label.config(text=f"Fehler beim Löschen des Ordners: {str(e)}", style="Red.TLabel")

def start_custom_program():
    try:
        subprocess.Popen(program_path)
        if exit_var.get() == 1:
            window.destroy() 
    except Exception as e:
        status_label.config(text=f"Fehler beim Starten des RSI Launcher: {str(e)}",
                            style="Red.TLabel")

delete_button = ttk.Button(window, text="Shaderordner löschen", command=lambda: delete_folder_contents(folder_path))

delete_button.grid(row=0, column=0, padx=125, pady=(100, 0))  # pady=(oben, unten)

status_label = ttk.Label(window, text="", style="TLabel")
status_label.grid(row=1, column=0, columnspan=2)

path_label = ttk.Label(window, text=f"Pfad zum Shaderordner: {folder_path}", style="TLabel")
path_label.grid(row=2, column=0, columnspan=2, padx=10, pady=5)

exit_var = IntVar(value=int(exit_checkbox_state.lower() == "true"))
exit_checkbox = ttk.Checkbutton(window, text="Automatisch beenden", variable=exit_var)
exit_checkbox.grid(row=3, column=0, padx=10, pady=80, sticky="w")

window.mainloop()